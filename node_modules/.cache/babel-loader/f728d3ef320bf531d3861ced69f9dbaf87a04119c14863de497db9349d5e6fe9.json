{"ast":null,"code":"// import React, { useState } from 'react';\n// import './ConnectWallet.css';\n// import { ethers } from 'ethers';\n\n// const ConnectWallet = () => {\n//   const [account, setAccount] = useState(null);\n//   const [balance, setBalance] = useState(null);\n\n//   const connectWallet = async () => {\n//     if (window.ethereum) {\n//       try {\n//         // Request account access\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         setAccount(accounts[0]);\n\n//         // Specify Sepolia network\n//         const sepoliaProvider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.https://sepolia.infura.io/v3/3de1dfa83d77414f9e271ade5ca4f5d5/v3/YOUR_INFURA_PROJECT_ID');\n\n//         // Fetch the balance\n//         const balanceInWei = await sepoliaProvider.getBalance(accounts[0]);\n//         const balanceInEther = ethers.utils.formatEther(balanceInWei);\n//         setBalance(balanceInEther);\n//       } catch (error) {\n//         console.error(\"User rejected the request or an error occurred:\", error);\n//       }\n//     } else {\n//       alert('MetaMask is not installed. Please install it to use this feature.');\n//     }\n//   };\n\n//   return (\n//     <div className=\"wallet-container\">\n//       <button className=\"connect-button\" onClick={connectWallet}>\n//         {account ? `Connected: ${account}` : \"Connect MetaMask\"}\n//       </button>\n//       {account && (\n//         <div className=\"wallet-info\">\n//           <p>Balance: {balance ? `${balance} ETH` : 'Fetching balance...'}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ConnectWallet;\n\nimport Web3 from 'web3';\n\n// Initialize Web3\nconst web3 = new Web3(Web3.givenProvider || 'http://localhost:8545');\n\n// ABI (Application Binary Interface) of the deployed contract\nconst abi = [{\n  \"constant\": true,\n  \"inputs\": [{\n    \"name\": \"walletAddress\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"getBalance\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [{\n    \"name\": \"walletAddress\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"isContract\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\n\n// Deployed contract address (replace with your actual contract address)\nconst contractAddress = '0xYourContractAddress';\n\n// Create contract instance\nconst walletInfoContract = new web3.eth.Contract(abi, contractAddress);\n\n// Example function to get the balance of an address\nasync function getWalletBalance(walletAddress) {\n  try {\n    const balance = await walletInfoContract.methods.getBalance(walletAddress).call();\n    console.log('Balance in wei:', balance);\n    console.log('Balance in ether:', web3.utils.fromWei(balance, 'ether'));\n  } catch (error) {\n    console.error('Error fetching balance:', error);\n  }\n}\n\n// Example usage\nconst addressToCheck = '0xAddressToCheck';\ngetWalletBalance(addressToCheck);","map":{"version":3,"names":["Web3","web3","givenProvider","abi","contractAddress","walletInfoContract","eth","Contract","getWalletBalance","walletAddress","balance","methods","getBalance","call","console","log","utils","fromWei","error","addressToCheck"],"sources":["/Users/devanshbaviskar/Documents/sperax_crypto_portfolio/src/components/ConnectWallet/ConnectWallet.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './ConnectWallet.css';\n// import { ethers } from 'ethers';\n\n// const ConnectWallet = () => {\n//   const [account, setAccount] = useState(null);\n//   const [balance, setBalance] = useState(null);\n\n//   const connectWallet = async () => {\n//     if (window.ethereum) {\n//       try {\n//         // Request account access\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         setAccount(accounts[0]);\n\n//         // Specify Sepolia network\n//         const sepoliaProvider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.https://sepolia.infura.io/v3/3de1dfa83d77414f9e271ade5ca4f5d5/v3/YOUR_INFURA_PROJECT_ID');\n\n//         // Fetch the balance\n//         const balanceInWei = await sepoliaProvider.getBalance(accounts[0]);\n//         const balanceInEther = ethers.utils.formatEther(balanceInWei);\n//         setBalance(balanceInEther);\n//       } catch (error) {\n//         console.error(\"User rejected the request or an error occurred:\", error);\n//       }\n//     } else {\n//       alert('MetaMask is not installed. Please install it to use this feature.');\n//     }\n//   };\n\n//   return (\n//     <div className=\"wallet-container\">\n//       <button className=\"connect-button\" onClick={connectWallet}>\n//         {account ? `Connected: ${account}` : \"Connect MetaMask\"}\n//       </button>\n//       {account && (\n//         <div className=\"wallet-info\">\n//           <p>Balance: {balance ? `${balance} ETH` : 'Fetching balance...'}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ConnectWallet;\n\n\nimport Web3 from 'web3';\n\n// Initialize Web3\nconst web3 = new Web3(Web3.givenProvider || 'http://localhost:8545');\n\n// ABI (Application Binary Interface) of the deployed contract\nconst abi = [\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"walletAddress\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"getBalance\",\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"walletAddress\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"isContract\",\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n];\n\n// Deployed contract address (replace with your actual contract address)\nconst contractAddress = '0xYourContractAddress';\n\n// Create contract instance\nconst walletInfoContract = new web3.eth.Contract(abi, contractAddress);\n\n// Example function to get the balance of an address\nasync function getWalletBalance(walletAddress) {\n    try {\n        const balance = await walletInfoContract.methods.getBalance(walletAddress).call();\n        console.log('Balance in wei:', balance);\n        console.log('Balance in ether:', web3.utils.fromWei(balance, 'ether'));\n    } catch (error) {\n        console.error('Error fetching balance:', error);\n    }\n}\n\n// Example usage\nconst addressToCheck = '0xAddressToCheck';\ngetWalletBalance(addressToCheck);\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,IAAI,MAAM,MAAM;;AAEvB;AACA,MAAMC,IAAI,GAAG,IAAID,IAAI,CAACA,IAAI,CAACE,aAAa,IAAI,uBAAuB,CAAC;;AAEpE;AACA,MAAMC,GAAG,GAAG,CACR;EACI,UAAU,EAAE,IAAI;EAChB,QAAQ,EAAE,CACN;IACI,MAAM,EAAE,eAAe;IACvB,MAAM,EAAE;EACZ,CAAC,CACJ;EACD,MAAM,EAAE,YAAY;EACpB,SAAS,EAAE,CACP;IACI,MAAM,EAAE,EAAE;IACV,MAAM,EAAE;EACZ,CAAC,CACJ;EACD,SAAS,EAAE,KAAK;EAChB,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACZ,CAAC,EACD;EACI,UAAU,EAAE,IAAI;EAChB,QAAQ,EAAE,CACN;IACI,MAAM,EAAE,eAAe;IACvB,MAAM,EAAE;EACZ,CAAC,CACJ;EACD,MAAM,EAAE,YAAY;EACpB,SAAS,EAAE,CACP;IACI,MAAM,EAAE,EAAE;IACV,MAAM,EAAE;EACZ,CAAC,CACJ;EACD,SAAS,EAAE,KAAK;EAChB,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACZ,CAAC,CACJ;;AAED;AACA,MAAMC,eAAe,GAAG,uBAAuB;;AAE/C;AACA,MAAMC,kBAAkB,GAAG,IAAIJ,IAAI,CAACK,GAAG,CAACC,QAAQ,CAACJ,GAAG,EAAEC,eAAe,CAAC;;AAEtE;AACA,eAAeI,gBAAgBA,CAACC,aAAa,EAAE;EAC3C,IAAI;IACA,MAAMC,OAAO,GAAG,MAAML,kBAAkB,CAACM,OAAO,CAACC,UAAU,CAACH,aAAa,CAAC,CAACI,IAAI,CAAC,CAAC;IACjFC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,OAAO,CAAC;IACvCI,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEd,IAAI,CAACe,KAAK,CAACC,OAAO,CAACP,OAAO,EAAE,OAAO,CAAC,CAAC;EAC1E,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACnD;AACJ;;AAEA;AACA,MAAMC,cAAc,GAAG,kBAAkB;AACzCX,gBAAgB,CAACW,cAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}