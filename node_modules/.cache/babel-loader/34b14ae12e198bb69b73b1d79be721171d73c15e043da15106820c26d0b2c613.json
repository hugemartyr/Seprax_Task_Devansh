{"ast":null,"code":"var _jsxFileName = \"/Users/devanshbaviskar/Documents/sperax_crypto_portfolio/src/components/TokenBalanceViewer/TokenBalanceViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport TokenWatchlistABI from './TokenWatchlistABI.json'; // Import ABI\n// import './TokenWatchlist.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TokenWatchlist = () => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [tokenAddress, setTokenAddress] = useState('');\n  const [watchlist, setWatchlist] = useState([]);\n  useEffect(() => {\n    if (window.ethereum) {\n      const providerInstance = new ethers.providers.Web3Provider(window.ethereum);\n      setProvider(providerInstance);\n    } else {\n      alert('MetaMask is not installed. Please install it to use this feature.');\n    }\n  }, []);\n  const connectWallet = async () => {\n    try {\n      await provider.send(\"eth_requestAccounts\", []);\n      const signerInstance = provider.getSigner();\n      setSigner(signerInstance);\n      const accountAddress = await signerInstance.getAddress();\n      setAccount(accountAddress);\n\n      // Initialize contract instance\n      const contractInstance = new ethers.Contract('0xe3b9D8589563D85195a819278E79275891AA60bd',\n      // Replace with your deployed contract address\n      TokenWatchlistABI, signerInstance);\n      setContract(contractInstance);\n      fetchWatchlist();\n    } catch (error) {\n      console.error(\"Error connecting to MetaMask:\", error);\n    }\n  };\n  const addTokenToWatchlist = async () => {\n    if (contract && signer) {\n      try {\n        const tx = await contract.addTokenToWatchlist(tokenAddress);\n        await tx.wait();\n        alert('Token added to watchlist successfully!');\n        fetchWatchlist();\n      } catch (error) {\n        console.error(\"Error adding token to watchlist:\", error);\n      }\n    }\n  };\n  const fetchWatchlist = async () => {\n    if (contract) {\n      try {\n        const watchlist = await contract.getWatchlist();\n        setWatchlist(watchlist);\n      } catch (error) {\n        console.error(\"Error fetching watchlist:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"connect-button\",\n      onClick: connectWallet,\n      children: account ? `Connected: ${account}` : 'Connect Wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), account && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter token address\",\n        value: tokenAddress,\n        onChange: e => setTokenAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"connect-button\",\n        onClick: addTokenToWatchlist,\n        children: \"Add Token to Watchlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Watchlist:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: watchlist.map((token, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: token\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(TokenWatchlist, \"hczmzZlAk46StIgeaivRFTSQyqc=\");\n_c = TokenWatchlist;\nexport default TokenWatchlist;\nvar _c;\n$RefreshReg$(_c, \"TokenWatchlist\");","map":{"version":3,"names":["React","useState","useEffect","ethers","TokenWatchlistABI","jsxDEV","_jsxDEV","TokenWatchlist","_s","account","setAccount","provider","setProvider","signer","setSigner","contract","setContract","tokenAddress","setTokenAddress","watchlist","setWatchlist","window","ethereum","providerInstance","providers","Web3Provider","alert","connectWallet","send","signerInstance","getSigner","accountAddress","getAddress","contractInstance","Contract","fetchWatchlist","error","console","addTokenToWatchlist","tx","wait","getWatchlist","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","token","index","_c","$RefreshReg$"],"sources":["/Users/devanshbaviskar/Documents/sperax_crypto_portfolio/src/components/TokenBalanceViewer/TokenBalanceViewer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport TokenWatchlistABI from './TokenWatchlistABI.json'; // Import ABI\n// import './TokenWatchlist.css';\n\nconst TokenWatchlist = () => {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [tokenAddress, setTokenAddress] = useState('');\n  const [watchlist, setWatchlist] = useState([]);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      const providerInstance = new ethers.providers.Web3Provider(window.ethereum);\n      setProvider(providerInstance);\n    } else {\n      alert('MetaMask is not installed. Please install it to use this feature.');\n    }\n  }, []);\n\n  const connectWallet = async () => {\n    try {\n      await provider.send(\"eth_requestAccounts\", []);\n      const signerInstance = provider.getSigner();\n      setSigner(signerInstance);\n\n      const accountAddress = await signerInstance.getAddress();\n      setAccount(accountAddress);\n\n      // Initialize contract instance\n      const contractInstance = new ethers.Contract(\n        '0xe3b9D8589563D85195a819278E79275891AA60bd', // Replace with your deployed contract address\n        TokenWatchlistABI,\n        signerInstance\n      );\n      setContract(contractInstance);\n      fetchWatchlist();\n    } catch (error) {\n      console.error(\"Error connecting to MetaMask:\", error);\n    }\n  };\n\n  const addTokenToWatchlist = async () => {\n    if (contract && signer) {\n      try {\n        const tx = await contract.addTokenToWatchlist(tokenAddress);\n        await tx.wait();\n        alert('Token added to watchlist successfully!');\n        fetchWatchlist();\n      } catch (error) {\n        console.error(\"Error adding token to watchlist:\", error);\n      }\n    }\n  };\n\n  const fetchWatchlist = async () => {\n    if (contract) {\n      try {\n        const watchlist = await contract.getWatchlist();\n        setWatchlist(watchlist);\n      } catch (error) {\n        console.error(\"Error fetching watchlist:\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <button className=\"connect-button\" onClick={connectWallet}>\n        {account ? `Connected: ${account}` : 'Connect Wallet'}\n      </button>\n      {account && (\n        <div>\n          <input \n            type=\"text\" \n            placeholder=\"Enter token address\" \n            value={tokenAddress}\n            onChange={(e) => setTokenAddress(e.target.value)}\n          />\n          <button className=\"connect-button\" onClick={addTokenToWatchlist}>Add Token to Watchlist</button>\n          <h3>Watchlist:</h3>\n          <ul>\n            {watchlist.map((token, index) => (\n              <li key={index}>{token}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TokenWatchlist;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}