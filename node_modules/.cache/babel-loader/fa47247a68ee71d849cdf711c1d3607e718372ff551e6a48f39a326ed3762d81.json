{"ast":null,"code":"var _jsxFileName = \"/Users/devanshbaviskar/Documents/sperax_crypto_portfolio/src/components/ConnectWallet/ConnectWallet1.js\",\n  _s = $RefreshSig$();\n// 0x9396B453Fad71816cA9f152Ae785276a1D578492\n\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SimpleStorageABI from './SimpleStorageABI.json'; // Import ABI\nimport './ConnectWallet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectWallet1 = () => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [value, setValue] = useState('');\n  const [storedValue, setStoredValue] = useState(null);\n  useEffect(() => {\n    if (window.ethereum) {\n      const web3Instance = new Web3(window.ethereum);\n      setWeb3(web3Instance);\n    } else {\n      alert('MetaMask is not installed. Please install it to use this feature.');\n    }\n  }, []);\n  const connectWallet = async () => {\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setAccount(accounts[0]);\n\n      // Initialize contract instance\n      const contractInstance = new web3.eth.Contract(SimpleStorageABI, '0x838F9b8228a5C95a7c431bcDAb58E289f5D2A4DC' // Replace with your deployed contract address\n      );\n      setContract(contractInstance);\n    } catch (error) {\n      console.error(\"Error connecting to MetaMask:\", error);\n    }\n  };\n  const storeValue = async () => {\n    if (contract && account) {\n      try {\n        await contract.methods.set(value).send({\n          from: account\n        });\n        alert('Value stored successfully!');\n      } catch (error) {\n        console.error(\"Error storing value:\", error);\n      }\n    }\n  };\n  const fetchStoredValue = async () => {\n    if (contract) {\n      try {\n        const storedValue = await contract.methods.get().call();\n        setStoredValue(storedValue);\n      } catch (error) {\n        console.error(\"Error fetching stored value:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      children: account ? `Connected: ${account}` : 'Connect Wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), account && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Enter value to store\",\n        value: value,\n        onChange: e => setValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: storeValue,\n        children: \"Store Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchStoredValue,\n        children: \"Fetch Stored Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), storedValue !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Stored Value: \", storedValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectWallet1, \"PL2rZJJujsCbMpz5va4InfVDghA=\");\n_c = ConnectWallet1;\nexport default ConnectWallet1;\nvar _c;\n$RefreshReg$(_c, \"ConnectWallet1\");","map":{"version":3,"names":["React","useState","useEffect","Web3","SimpleStorageABI","jsxDEV","_jsxDEV","ConnectWallet1","_s","account","setAccount","web3","setWeb3","contract","setContract","value","setValue","storedValue","setStoredValue","window","ethereum","web3Instance","alert","connectWallet","accounts","request","method","contractInstance","eth","Contract","error","console","storeValue","methods","set","send","from","fetchStoredValue","get","call","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/devanshbaviskar/Documents/sperax_crypto_portfolio/src/components/ConnectWallet/ConnectWallet1.js"],"sourcesContent":["// 0x9396B453Fad71816cA9f152Ae785276a1D578492\n\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SimpleStorageABI from './SimpleStorageABI.json'; // Import ABI\nimport './ConnectWallet.css';\n\nconst ConnectWallet1 = () => {\n  const [account, setAccount] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [value, setValue] = useState('');\n  const [storedValue, setStoredValue] = useState(null);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      const web3Instance = new Web3(window.ethereum);\n      setWeb3(web3Instance);\n    } else {\n      alert('MetaMask is not installed. Please install it to use this feature.');\n    }\n  }, []);\n\n  const connectWallet = async () => {\n    try {\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      setAccount(accounts[0]);\n\n      // Initialize contract instance\n      const contractInstance = new web3.eth.Contract(\n        SimpleStorageABI,\n        '0x838F9b8228a5C95a7c431bcDAb58E289f5D2A4DC' // Replace with your deployed contract address\n      );\n      setContract(contractInstance);\n    } catch (error) {\n      console.error(\"Error connecting to MetaMask:\", error);\n    }\n  };\n\n  const storeValue = async () => {\n    if (contract && account) {\n      try {\n        await contract.methods.set(value).send({ from: account });\n        alert('Value stored successfully!');\n      } catch (error) {\n        console.error(\"Error storing value:\", error);\n      }\n    }\n  };\n\n  const fetchStoredValue = async () => {\n    if (contract) {\n      try {\n        const storedValue = await contract.methods.get().call();\n        setStoredValue(storedValue);\n      } catch (error) {\n        console.error(\"Error fetching stored value:\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={connectWallet}>\n        {account ? `Connected: ${account}` : 'Connect Wallet'}\n      </button>\n      {account && (\n        <div>\n          <input \n            type=\"number\" \n            placeholder=\"Enter value to store\" \n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n          />\n          <button onClick={storeValue}>Store Value</button>\n          <button onClick={fetchStoredValue}>Fetch Stored Value</button>\n          {storedValue !== null && <p>Stored Value: {storedValue}</p>}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ConnectWallet1;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}