{"ast":null,"code":"var _jsxFileName = \"/Users/devanshbaviskar/Documents/sperax_crypto_portfolio/src/components/ConnectWallet/ConnectWallet1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SimpleStorageABI from './SimpleStorageABI.json'; // Import ABI\nimport './ConnectWallet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectWallet1 = () => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [value, setValue] = useState('');\n  const [storedValue, setStoredValue] = useState(null);\n  useEffect(() => {\n    if (window.ethereum) {\n      const web3Instance = new Web3(window.ethereum);\n      setWeb3(web3Instance);\n    } else {\n      alert('MetaMask is not installed. Please install it to use this feature.');\n    }\n  }, []);\n  const connectWallet = async () => {\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setAccount(accounts[0]);\n\n      // Initialize contract instance\n      const contractInstance = new web3.eth.Contract(SimpleStorageABI, '0xd7455e8341aE5f77e875b8D80280cEA26AC144D1' // Your deployed contract address\n      );\n      setContract(contractInstance);\n    } catch (error) {\n      console.error(\"Error connecting to MetaMask:\", error);\n    }\n  };\n  const storeValue = async () => {\n    if (contract && account) {\n      try {\n        // Trigger MetaMask to send a transaction\n        await contract.methods.set(value).send({\n          from: account\n        });\n        alert('Value stored successfully!');\n      } catch (error) {\n        console.error(\"Error storing value:\", error);\n      }\n    }\n  };\n  const fetchStoredValue = async () => {\n    if (contract) {\n      try {\n        // Make a call to the contract to get the stored value\n        console.log(\"Fetching the stored value...\");\n        const storedValue = await contract.methods.get().call();\n        console.log(\"Fetched value:\", storedValue);\n        alert('Value stored = ' + storedValue);\n        System.out.println({\n          str\n        });\n        setStoredValue(storedValue);\n      } catch (error) {\n        console.error(\"Error fetching stored value:\", error.message || error);\n      }\n    } else {\n      console.error(\"Contract is not initialized\");\n    }\n  };\n\n  //   return (\n  //     <div>\n  //       <button className=\"connect-button\" onClick={connectWallet}>\n  //         {account ? `Connected: ${account}` : 'Connect Wallet'}\n  //       </button>\n  //       {account && (\n  //         <div>\n  //           <input \n  //             type=\"number\" \n  //             placeholder=\"Enter value to store\" \n  //             value={value}\n  //             onChange={(e) => setValue(e.target.value)}\n  //           />\n  //           <button className=\"connect-button\" onClick={storeValue}>Store Value</button>\n  //           <button className=\"connect-button\" onClick={fetchStoredValue}>Fetch Stored Value</button>\n  //           {storedValue !== null && <p>Stored Value: {storedValue}</p>}\n  //         </div>\n  //       )}\n  //     </div>\n  //   );\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"connect-button\",\n      onClick: connectWallet,\n      children: account ? `Connected: ${account}` : 'Connect Wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), account && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Enter value to store\",\n        value: value,\n        onChange: e => setValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"connect-button\",\n        onClick: storeValue,\n        children: \"Store Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"connect-button\",\n        onClick: fetchStoredValue,\n        children: \"Fetch Stored Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), storedValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stored-value\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Stored Value: \", storedValue, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", storedValue, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectWallet1, \"PL2rZJJujsCbMpz5va4InfVDghA=\");\n_c = ConnectWallet1;\nexport default ConnectWallet1;\nvar _c;\n$RefreshReg$(_c, \"ConnectWallet1\");","map":{"version":3,"names":["React","useState","useEffect","Web3","SimpleStorageABI","jsxDEV","_jsxDEV","ConnectWallet1","_s","account","setAccount","web3","setWeb3","contract","setContract","value","setValue","storedValue","setStoredValue","window","ethereum","web3Instance","alert","connectWallet","accounts","request","method","contractInstance","eth","Contract","error","console","storeValue","methods","set","send","from","fetchStoredValue","log","get","call","System","out","println","str","message","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/devanshbaviskar/Documents/sperax_crypto_portfolio/src/components/ConnectWallet/ConnectWallet1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SimpleStorageABI from './SimpleStorageABI.json'; // Import ABI\nimport './ConnectWallet.css';\n\nconst ConnectWallet1 = () => {\n  const [account, setAccount] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [value, setValue] = useState('');\n  const [storedValue, setStoredValue] = useState(null);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      const web3Instance = new Web3(window.ethereum);\n      setWeb3(web3Instance);\n    } else {\n      alert('MetaMask is not installed. Please install it to use this feature.');\n    }\n  }, []);\n\n  const connectWallet = async () => {\n    try {\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      setAccount(accounts[0]);\n\n      // Initialize contract instance\n      const contractInstance = new web3.eth.Contract(\n        SimpleStorageABI,\n        '0xd7455e8341aE5f77e875b8D80280cEA26AC144D1' // Your deployed contract address\n      );\n      setContract(contractInstance);\n    } catch (error) {\n      console.error(\"Error connecting to MetaMask:\", error);\n    }\n  };\n\n  const storeValue = async () => {\n    if (contract && account) {\n      try {\n        // Trigger MetaMask to send a transaction\n        await contract.methods.set(value).send({ from: account });\n        alert('Value stored successfully!');\n      } catch (error) {\n        console.error(\"Error storing value:\", error);\n      }\n    }\n  };\n\n  const fetchStoredValue = async () => {\n    if (contract) {\n      try {\n        // Make a call to the contract to get the stored value\n        console.log(\"Fetching the stored value...\");\n        const storedValue = await contract.methods.get().call();\n        console.log(\"Fetched value:\", storedValue);\n        alert('Value stored = ' + storedValue);\n        System.out.println({str})\n        \n        setStoredValue(storedValue);\n      } catch (error) {\n        console.error(\"Error fetching stored value:\", error.message || error);\n      }\n    } else {\n      console.error(\"Contract is not initialized\");\n    }\n  };\n  \n\n//   return (\n//     <div>\n//       <button className=\"connect-button\" onClick={connectWallet}>\n//         {account ? `Connected: ${account}` : 'Connect Wallet'}\n//       </button>\n//       {account && (\n//         <div>\n//           <input \n//             type=\"number\" \n//             placeholder=\"Enter value to store\" \n//             value={value}\n//             onChange={(e) => setValue(e.target.value)}\n//           />\n//           <button className=\"connect-button\" onClick={storeValue}>Store Value</button>\n//           <button className=\"connect-button\" onClick={fetchStoredValue}>Fetch Stored Value</button>\n//           {storedValue !== null && <p>Stored Value: {storedValue}</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\nreturn (\n    <div>\n      <button className=\"connect-button\" onClick={connectWallet}>\n        {account ? `Connected: ${account}` : 'Connect Wallet'}\n      </button>\n      {account && (\n        <div>\n          <input \n            type=\"number\" \n            placeholder=\"Enter value to store\" \n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n          />\n          <button className=\"connect-button\" onClick={storeValue}>Store Value</button>\n          <button className=\"connect-button\" onClick={fetchStoredValue}>Fetch Stored Value</button>\n          {storedValue !== null && (\n            <div className=\"stored-value\">\n              <p>Stored Value: {storedValue} </p>\n              <p> {storedValue} </p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n\nexport default ConnectWallet1;\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}