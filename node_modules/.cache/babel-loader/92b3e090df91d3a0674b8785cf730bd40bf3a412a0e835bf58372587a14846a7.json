{"ast":null,"code":"var _jsxFileName = \"/Users/devanshbaviskar/Documents/sperax_crypto_portfolio/src/components/SimpleTransfer/SimpleTransfer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SimpleTransferABI from './SimpleTransferABI.json'; // Import ABI\nimport './SimpleTransfer.css'; // Create this CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleTransfer = () => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [recipientAddress, setRecipientAddress] = useState('');\n  const [amount, setAmount] = useState('');\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    if (window.ethereum) {\n      const web3Instance = new Web3(window.ethereum);\n      setWeb3(web3Instance);\n      const contractInstance = new web3Instance.eth.Contract(SimpleTransferABI, '0x9e940683A95D955D261A66559008cb6D6c7edeb8' // Replace with your deployed contract address\n      );\n      setContract(contractInstance);\n    } else {\n      alert('MetaMask is not installed. Please install it to use this feature.');\n    }\n  }, []);\n  const connectWallet = async () => {\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(\"Error connecting to MetaMask:\", error);\n    }\n  };\n  const handleTransfer = async () => {\n    if (contract && account) {\n      try {\n        const _value = web3.utils.toWei(amount, 'ether'); // Convert amount to Wei\n        console.log(recipientAddress);\n        await contract.methods.transferEther(recipientAddress).send({\n          from: account,\n          value: _value.toString()\n        });\n        setMessage('Transfer successful!');\n      } catch (error) {\n        console.error(\"Error during transfer:\", error);\n        setMessage('Transfer failed!');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transfer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"connect-button\",\n      onClick: connectWallet,\n      children: account ? `Connected: ${account}` : 'Connect Wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), account && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transfer-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Recipient Address\",\n        value: recipientAddress,\n        onChange: e => setRecipientAddress(e.target.value),\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Amount (ETH)\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"transfer-button\",\n        onClick: handleTransfer,\n        children: \"Transfer Ether\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(SimpleTransfer, \"oMrA8DLb3cz1y+6mJUmoczmVZkE=\");\n_c = SimpleTransfer;\nexport default SimpleTransfer;\nvar _c;\n$RefreshReg$(_c, \"SimpleTransfer\");","map":{"version":3,"names":["React","useState","useEffect","Web3","SimpleTransferABI","jsxDEV","_jsxDEV","SimpleTransfer","_s","account","setAccount","web3","setWeb3","contract","setContract","recipientAddress","setRecipientAddress","amount","setAmount","message","setMessage","window","ethereum","web3Instance","contractInstance","eth","Contract","alert","connectWallet","accounts","request","method","error","console","handleTransfer","_value","utils","toWei","log","methods","transferEther","send","from","value","toString","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/devanshbaviskar/Documents/sperax_crypto_portfolio/src/components/SimpleTransfer/SimpleTransfer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SimpleTransferABI from './SimpleTransferABI.json'; // Import ABI\nimport './SimpleTransfer.css'; // Create this CSS file for styling\n\nconst SimpleTransfer = () => {\n    const [account, setAccount] = useState(null);\n    const [web3, setWeb3] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [recipientAddress, setRecipientAddress] = useState('');\n    const [amount, setAmount] = useState('');\n    const [message, setMessage] = useState('');\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const web3Instance = new Web3(window.ethereum);\n            setWeb3(web3Instance);\n            const contractInstance = new web3Instance.eth.Contract(\n                SimpleTransferABI,\n                '0x9e940683A95D955D261A66559008cb6D6c7edeb8' // Replace with your deployed contract address\n            );\n            setContract(contractInstance);\n        } else {\n            alert('MetaMask is not installed. Please install it to use this feature.');\n        }\n    }, []);\n\n    const connectWallet = async () => {\n        try {\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            setAccount(accounts[0]);\n        } catch (error) {\n            console.error(\"Error connecting to MetaMask:\", error);\n        }\n    };\n\n    const handleTransfer = async () => {\n        if (contract && account) {\n            try {\n                const _value = web3.utils.toWei(amount, 'ether'); // Convert amount to Wei\n                console.log(recipientAddress);\n                await contract.methods.transferEther(recipientAddress).send({ from: account, value: _value.toString() });\n\n                setMessage('Transfer successful!');\n            } catch (error) {\n                console.error(\"Error during transfer:\", error);\n                setMessage('Transfer failed!');\n            }\n        }\n    };\n\n    return (\n        <div className=\"transfer-container\">\n            <button className=\"connect-button\" onClick={connectWallet}>\n                {account ? `Connected: ${account}` : 'Connect Wallet'}\n            </button>\n            {account && (\n                <div className=\"transfer-form\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Recipient Address\"\n                        value={recipientAddress}\n                        onChange={(e) => setRecipientAddress(e.target.value)}\n                        className=\"input-field\"\n                    />\n                    <input\n                        type=\"number\"\n                        placeholder=\"Amount (ETH)\"\n                        value={amount}\n                        onChange={(e) => setAmount(e.target.value)}\n                        className=\"input-field\"\n                    />\n                    <button className=\"transfer-button\" onClick={handleTransfer}>Transfer Ether</button>\n                    {message && <p className=\"message\">{message}</p>}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SimpleTransfer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,iBAAiB,MAAM,0BAA0B,CAAC,CAAC;AAC1D,OAAO,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACc,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACZ,IAAImB,MAAM,CAACC,QAAQ,EAAE;MACjB,MAAMC,YAAY,GAAG,IAAIpB,IAAI,CAACkB,MAAM,CAACC,QAAQ,CAAC;MAC9CV,OAAO,CAACW,YAAY,CAAC;MACrB,MAAMC,gBAAgB,GAAG,IAAID,YAAY,CAACE,GAAG,CAACC,QAAQ,CAClDtB,iBAAiB,EACjB,4CAA4C,CAAC;MACjD,CAAC;MACDU,WAAW,CAACU,gBAAgB,CAAC;IACjC,CAAC,MAAM;MACHG,KAAK,CAAC,mEAAmE,CAAC;IAC9E;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMR,MAAM,CAACC,QAAQ,CAACQ,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MACjFrB,UAAU,CAACmB,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD;EACJ,CAAC;EAED,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIrB,QAAQ,IAAIJ,OAAO,EAAE;MACrB,IAAI;QACA,MAAM0B,MAAM,GAAGxB,IAAI,CAACyB,KAAK,CAACC,KAAK,CAACpB,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QAClDgB,OAAO,CAACK,GAAG,CAACvB,gBAAgB,CAAC;QAC7B,MAAMF,QAAQ,CAAC0B,OAAO,CAACC,aAAa,CAACzB,gBAAgB,CAAC,CAAC0B,IAAI,CAAC;UAAEC,IAAI,EAAEjC,OAAO;UAAEkC,KAAK,EAAER,MAAM,CAACS,QAAQ,CAAC;QAAE,CAAC,CAAC;QAExGxB,UAAU,CAAC,sBAAsB,CAAC;MACtC,CAAC,CAAC,OAAOY,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CZ,UAAU,CAAC,kBAAkB,CAAC;MAClC;IACJ;EACJ,CAAC;EAED,oBACId,OAAA;IAAKuC,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/BxC,OAAA;MAAQuC,SAAS,EAAC,gBAAgB;MAACE,OAAO,EAAEnB,aAAc;MAAAkB,QAAA,EACrDrC,OAAO,GAAG,cAAcA,OAAO,EAAE,GAAG;IAAgB;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,EACR1C,OAAO,iBACJH,OAAA;MAAKuC,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC1BxC,OAAA;QACI8C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,mBAAmB;QAC/BV,KAAK,EAAE5B,gBAAiB;QACxBuC,QAAQ,EAAGC,CAAC,IAAKvC,mBAAmB,CAACuC,CAAC,CAACC,MAAM,CAACb,KAAK,CAAE;QACrDE,SAAS,EAAC;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACF7C,OAAA;QACI8C,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,cAAc;QAC1BV,KAAK,EAAE1B,MAAO;QACdqC,QAAQ,EAAGC,CAAC,IAAKrC,SAAS,CAACqC,CAAC,CAACC,MAAM,CAACb,KAAK,CAAE;QAC3CE,SAAS,EAAC;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACF7C,OAAA;QAAQuC,SAAS,EAAC,iBAAiB;QAACE,OAAO,EAAEb,cAAe;QAAAY,QAAA,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACnFhC,OAAO,iBAAIb,OAAA;QAAGuC,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAE3B;MAAO;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC3C,EAAA,CAzEID,cAAc;AAAAkD,EAAA,GAAdlD,cAAc;AA2EpB,eAAeA,cAAc;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}